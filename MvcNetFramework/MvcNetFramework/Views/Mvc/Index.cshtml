@model PagedList.IPagedList<MvcNetFramework.Models.Entities.DemoPerson>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*@Html.AntiForgeryToken()*@
<h2>Demo Person</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
@using (Html.BeginForm("Index", "DemoPerson", FormMethod.Get))
{
    <p>
        Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}
<table class="table">
    <tr>
        <th>No.</th>
        <th>@Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })</th>
        <th>Remark</th>
        <th>Created</th>
        <th>@Html.ActionLink("Updated", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })</th>
        <th>Action</th>
    </tr>
    @{
        int count = 1 + Model.PageNumber * Model.PageSize - Model.PageSize;
        foreach (var item in Model)
        {
            <tr>
                <td>
                    @count
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remark)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Created)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Updated)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { guid = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { guid = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { guid = item.Id })
                </td>
            </tr>
            count++;
        }
    }

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
